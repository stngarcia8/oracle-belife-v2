<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="queryCliente_ListarTodo" xml:space="preserve">
    <value>SELECT cli.RutCliente AS Rut, cli.nombreCliente AS Nombre, cli.apellidosCliente AS Apellido, cli.fechaNacimiento AS Fecha, est.IdEstadoCivil AS IdEstado, est.descripcion AS EstadoCivil, sex.IdSexo AS IdSexo, sex.descripcion AS Sexo FROM cliente cli join estadoCivil est on cli.IdEstadoCivil=est.IdEstadoCivil join sexo sex on cli.IdSexo=sex.IdSexo ORDER BY cli.apellidosCliente, cli.NombreCliente</value>
  </data>
  <data name="queryCliente_ListarPorRut" xml:space="preserve">
    <value>SELECT cli.RutCliente AS Rut, cli.nombreCliente AS Nombre, cli.apellidosCliente AS Apellido, cli.fechaNacimiento AS Fecha, est.IdEstadoCivil AS IdEstado, est.descripcion AS EstadoCivil, sex.IdSexo AS IdSexo, sex.descripcion AS Sexo FROM cliente cli join estadoCivil est on cli.IdEstadoCivil=est.IdEstadoCivil join sexo sex on cli.IdSexo=sex.IdSexo WHERE trim(lower(cli.RutCliente))=trim(lower(:RutCliente)) ORDER BY cli.apellidosCliente, cli.NombreCliente</value>
  </data>
  <data name="queryEstadoCivil_ListarTodo" xml:space="preserve">
    <value>SELECT * FROM estadocivil ORDER BY idEstadoCivil</value>
  </data>
  <data name="queryCliente_Eliminar" xml:space="preserve">
    <value>DELETE FROM cliente WHERE trim(lower(RutCliente))=trim(lower(:RutCliente))</value>
  </data>
  <data name="queryCliente_ListarPorEstadoCivil" xml:space="preserve">
    <value>SELECT cli.RutCliente AS Rut, cli.nombreCliente AS Nombre, cli.apellidosCliente AS Apellido, cli.fechaNacimiento AS Fecha, est.IdEstadoCivil AS IdEstado, est.descripcion AS EstadoCivil, sex.IdSexo AS IdSexo, sex.descripcion AS Sexo FROM cliente cli join estadoCivil est on cli.IdEstadoCivil=est.IdEstadoCivil join sexo sex on cli.IdSexo=sex.IdSexo WHERE est.IdEstadoCivil=:idEstadoCivil ORDER BY cli.apellidosCliente, cli.NombreCliente</value>
  </data>
  <data name="queryCliente_ListarPorSexo" xml:space="preserve">
    <value>SELECT cli.RutCliente AS Rut, cli.nombreCliente AS Nombre, cli.apellidosCliente AS Apellido, cli.fechaNacimiento AS Fecha, est.IdEstadoCivil AS IdEstado, est.descripcion AS EstadoCivil, sex.IdSexo AS IdSexo, sex.descripcion AS Sexo FROM cliente cli join estadoCivil est on cli.IdEstadoCivil=est.IdEstadoCivil join sexo sex on cli.IdSexo=sex.IdSexo WHERE sex.IdSexo=:idSexo ORDER BY cli.apellidosCliente, cli.NombreCliente </value>
  </data>
  <data name="querySexo_ListarTodo" xml:space="preserve">
    <value>SELECT * FROM sexo ORDER BY idSexo</value>
  </data>
  <data name="queryCliente_Actualizar" xml:space="preserve">
    <value>UPDATE cliente SET nombreCliente=:nombreCliente, apellidosCliente=:apellidosCliente, fechaNacimiento=:fechaNacimiento, idSexo=:idSexo, idEstadoCivil=:idEstadoCivil WHERE rutCliente=:rutCliente</value>
  </data>
  <data name="queryCliente_Insertar" xml:space="preserve">
    <value>INSERT INTO cliente VALUES(:rutCliente, :nombreCliente, :apellidosCliente, :fechaNacimiento, :idSexo, :idEstadoCivil)</value>
  </data>
  <data name="queryCliente_ListaContratos" xml:space="preserve">
    <value>SELECT C.numero AS Numero, to_char(C.FECHACONTRATO, 'dd/MM/yyyy') AS Inicio_contrato, to_char(C.FECHATERMINOCONTRATO, 'dd/MM/yyyy') AS Termino_contrato, C.idPlan AS idPlan, p.nombre AS Nombre_plan, to_char(FECHAINICIOVIGENCIA, 'dd/MM/yyyy') AS Inicio_vigencia, to_char(C.FECHAFINVIGENCIA, 'dd/MM/yyyy') AS Termino_vigencia, CASE WHEN C.VIGENTE=1 THEN 'Si' ELSE 'No' END AS Vigente, CASE WHEN C.DECLARACIONSALUD=1 THEN 'Si' ELSE 'No' END AS Declaracion_salud, p.PRIMABASE as Prima_base, C.PRIMAMENSUAL AS Prima_mensual, C.PRIMAANUAL AS Prima_Anual FROM contrato C join plan p on c.idPlan=p.idPlan WHERE trim(lower(rutcliente))=trim(lower(:rutCliente)) ORDER BY c.numero</value>
  </data>
  <data name="queryContrato_ListarTodo" xml:space="preserve">
    <value>SELECT C.numero AS Numero, to_char(C.FECHACONTRATO, 'dd/MM/yyyy') AS Inicio_contrato, to_char(C.FECHATERMINOCONTRATO, 'dd/MM/yyyy') AS Termino_contrato, c.rutCliente as Rut, cl.nombreCliente||' '||cl.apellidosCliente  as Cliente, C.idPlan AS idPlan, p.nombre AS Nombre_plan, p.polizaActual AS Poliza, to_char(FECHAINICIOVIGENCIA, 'dd/MM/yyyy') AS Inicio_vigencia, to_char(C.FECHAFINVIGENCIA, 'dd/MM/yyyy') AS Termino_vigencia, CASE WHEN C.VIGENTE=1 THEN 'Si' ELSE 'No' END AS Vigente, CASE WHEN C.DECLARACIONSALUD=1 THEN 'Si' ELSE 'No' END AS Declaracion_salud, p.PRIMABASE as Prima_base, C.PRIMAMENSUAL AS Prima_mensual, C.PRIMAANUAL AS Prima_Anual, c.observaciones AS Observaciones FROM contrato C join plan p on c.idPlan=p.idPlan join cliente cl on c.rutCliente=cl.rutCliente ORDER BY c.numero</value>
  </data>
  <data name="queryContrato_ListarPorNumeroContrato" xml:space="preserve">
    <value>SELECT C.numero AS Numero, to_char(C.FECHACONTRATO, 'dd/MM/yyyy') AS Inicio_contrato, to_char(C.FECHATERMINOCONTRATO, 'dd/MM/yyyy') AS Termino_contrato, c.rutCliente as Rut, cl.nombreCliente||' '||cl.apellidosCliente  as Cliente, C.idPlan AS idPlan, p.nombre AS Nombre_plan, p.polizaActual AS Poliza, to_char(FECHAINICIOVIGENCIA, 'dd/MM/yyyy') AS Inicio_vigencia, to_char(C.FECHAFINVIGENCIA, 'dd/MM/yyyy') AS Termino_vigencia, CASE WHEN C.VIGENTE=1 THEN 'Si' ELSE 'No' END AS Vigente, CASE WHEN C.DECLARACIONSALUD=1 THEN 'Si' ELSE 'No' END AS Declaracion_salud, p.PRIMABASE as Prima_base, C.PRIMAMENSUAL AS Prima_mensual, C.PRIMAANUAL AS Prima_Anual, c.observaciones AS Observaciones FROM contrato C join plan p on c.idPlan=p.idPlan join cliente cl on c.rutCliente=cl.rutCliente  WHERE trim(lower(C.numero))=trim(lower(:numero)) ORDER BY c.numero</value>
  </data>
  <data name="queryContrato_ListarPorNumeroDePoliza" xml:space="preserve">
    <value>SELECT C.numero AS Numero, to_char(C.FECHACONTRATO, 'dd/MM/yyyy') AS Inicio_contrato, to_char(C.FECHATERMINOCONTRATO, 'dd/MM/yyyy') AS Termino_contrato, c.rutCliente as Rut, cl.nombreCliente||' '||cl.apellidosCliente  as Cliente, C.idPlan AS idPlan, p.nombre AS Nombre_plan, p.polizaActual AS Poliza, to_char(FECHAINICIOVIGENCIA, 'dd/MM/yyyy') AS Inicio_vigencia, to_char(C.FECHAFINVIGENCIA, 'dd/MM/yyyy') AS Termino_vigencia, CASE WHEN C.VIGENTE=1 THEN 'Si' ELSE 'No' END AS Vigente, CASE WHEN C.DECLARACIONSALUD=1 THEN 'Si' ELSE 'No' END AS Declaracion_salud, p.PRIMABASE as Prima_base, C.PRIMAMENSUAL AS Prima_mensual, C.PRIMAANUAL AS Prima_Anual, c.observaciones AS Observaciones FROM contrato C join plan p on c.idPlan=p.idPlan join cliente cl on c.rutCliente=cl.rutCliente  WHERE trim(lower(p.PolizaActual))=trim(lower(:poliza)) ORDER BY c.numero</value>
  </data>
  <data name="queryContrato_ListarPorRut" xml:space="preserve">
    <value>SELECT C.numero AS Numero, to_char(C.FECHACONTRATO, 'dd/MM/yyyy') AS Inicio_contrato, to_char(C.FECHATERMINOCONTRATO, 'dd/MM/yyyy') AS Termino_contrato, c.rutCliente as Rut, cl.nombreCliente||' '||cl.apellidosCliente  as Cliente, C.idPlan AS idPlan, p.nombre AS Nombre_plan, p.polizaActual AS Poliza, to_char(FECHAINICIOVIGENCIA, 'dd/MM/yyyy') AS Inicio_vigencia, to_char(C.FECHAFINVIGENCIA, 'dd/MM/yyyy') AS Termino_vigencia, CASE WHEN C.VIGENTE=1 THEN 'Si' ELSE 'No' END AS Vigente, CASE WHEN C.DECLARACIONSALUD=1 THEN 'Si' ELSE 'No' END AS Declaracion_salud, p.PRIMABASE as Prima_base, C.PRIMAMENSUAL AS Prima_mensual, C.PRIMAANUAL AS Prima_Anual, c.observaciones AS Observaciones FROM contrato C join plan p on c.idPlan=p.idPlan join cliente cl on c.rutCliente=cl.rutCliente  WHERE trim(lower(c.rutcliente))=trim(lower(:rutCliente)) ORDER BY c.numero</value>
  </data>
  <data name="queryPlan_ListarTodo" xml:space="preserve">
    <value>SELECT * FROM plan ORDER BY idPlan</value>
  </data>
  <data name="queryContrato_VerificarVigenciaDeContrato" xml:space="preserve">
    <value>SELECT C.numero AS Numero, to_char(C.FECHACONTRATO, 'dd/MM/yyyy') AS Inicio_contrato, to_char(C.FECHATERMINOCONTRATO, 'dd/MM/yyyy') AS Termino_contrato, c.rutCliente as Rut, cl.nombreCliente||' '||cl.apellidosCliente  as Cliente, C.idPlan AS idPlan, p.nombre AS Nombre_plan, p.polizaActual AS Poliza, to_char(FECHAINICIOVIGENCIA, 'dd/MM/yyyy') AS Inicio_vigencia, to_char(C.FECHAFINVIGENCIA, 'dd/MM/yyyy') AS Termino_vigencia, CASE WHEN C.VIGENTE=1 THEN 'Si' ELSE 'No' END AS Vigente, CASE WHEN C.DECLARACIONSALUD=1 THEN 'Si' ELSE 'No' END AS Declaracion_salud, p.PRIMABASE as Prima_base, C.PRIMAMENSUAL AS Prima_mensual, C.PRIMAANUAL AS Prima_Anual, c.observaciones AS Observaciones FROM contrato C join plan p on c.idPlan=p.idPlan join cliente cl on c.rutCliente=cl.rutCliente  WHERE trim(lower(C.rutCliente))=trim(lower(:rutCliente)) AND trim(lower(C.idPlan))=trim(lower(:idPlan)) AND C.VIGENTE=1 ORDER BY c.numero</value>
  </data>
  <data name="queryContrato_Actualizar" xml:space="preserve">
    <value>UPDATE  contrato SET fechaContrato=:fechaInicioContrato, fechaTerminoContrato=:fechaTerminoContrato, idPlan=:idPlan, fechaInicioVigencia=:inicioVigencia, fechaFinVigencia=:terminoVigencia, vigente=:vigente, declaracionSalud=:salud, primaAnual=:primaAnual, primaMensual=:primaMensual, observaciones=:observaciones WHERE numero=:numero AND rutCliente=:rutCliente</value>
  </data>
  <data name="queryContrato_Insertar" xml:space="preserve">
    <value>INSERT INTO contrato VALUES (:numero, :fechaInicioContrato, :fechaTerminoContrato,  :rutCliente, :idPlan, :inicioVigencia, :terminoVigencia, :vigente, :salud, :primaAnual, :primaMensual, :observaciones)</value>
  </data>
</root>